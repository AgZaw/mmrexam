{"version":3,"sources":["RegionList.js","CityList.js","App.js","serviceWorker.js","index.js"],"names":["RegionList","this","props","regions","year","className","map","region","i","to","name","key","no","Component","CityList","cities","city","href","table_no","App","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","exact","path","render","twok19","years","regionName","match","params","currentRegion","find","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVA4BeA,G,6KAtBH,IAAD,EACmBC,KAAKC,MAAvBC,EADD,EACCA,QAASC,EADV,EACUA,KACjB,OACE,wBAAIC,UAAU,+BAEVF,EAAQG,KAAI,SAACC,EAAQC,GACnB,OACE,kBAAC,IAAD,CAAMH,UAAU,aAAaI,GAAE,kBAAaF,EAAOG,MAAQC,IAAKH,GAC9D,wBAAIH,UAAU,mBACZ,6BAAME,EAAOK,IACb,6BAAML,EAAOG,MACb,6BAAMN,a,GAZCS,cCsBVC,G,6KAtBH,IACAC,EAAWd,KAAKC,MAAhBa,OACR,OACE,wBAAIV,UAAU,+BAEVU,EAAOT,KAAI,SAACU,EAAMR,GAChB,OACE,uBAAGH,UAAU,WAAWY,KAAMD,EAAKC,KAAMN,IAAKH,GAC5C,wBAAIH,UAAU,mBACZ,6BAAMW,EAAKJ,IACX,6BAAMI,EAAKN,MACX,6BAAMM,EAAKE,oB,GAZNL,cCoFRM,MAhFf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,iDACb,uBAAGA,UAAU,eAAeY,KAAK,aAAjC,sEACA,4BACEZ,UAAU,iBACVe,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMpB,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BqB,GAAG,0BAC3C,wBAAIrB,UAAU,sBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWY,KAAK,aAA7B,SAEF,wBAAIZ,UAAU,YACZ,uBAAGA,UAAU,WAAWY,KAAK,cAA7B,SAEF,wBAAIZ,UAAU,YACZ,uBAAGA,UAAU,WAAWY,KAAK,cAA7B,SAEF,wBAAIZ,UAAU,YACZ,uBAAGA,UAAU,WAAWY,KAAK,cAA7B,YAMR,yBAAKZ,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEsB,OAAK,EACLC,KAAK,WACLC,OAAQ,SAAA3B,GAAK,OACX,kBAAC,EAAD,eACEC,QAAS2B,EAAOC,MAChB3B,KAAM0B,EAAO1B,MACTF,OAIV,kBAAC,IAAD,CACEyB,OAAK,EACLC,KAAK,8BACLC,OAAQ,SAAA3B,GAAU,IACR8B,EAAe9B,EAAM+B,MAAMC,OAA3BF,WACFG,EAAgBL,EAAOC,MAAMK,MAAK,SAAA7B,GACtC,OAAOA,EAAOG,OAASsB,KAGnBjB,EAASoB,EAAcpB,QAAU,CAAC,CACtCH,GAAI,SACJF,KAAM,qEACNQ,SAAU,eACVD,KAAMkB,EAAclB,OAEtB,OACE,kBAAC,EAAD,CACEF,OAAQA,EACRX,KAAM0B,EAAO1B,UAKrB,kBAAC,IAAD,CAAOuB,OAAK,EAACE,OAAQ,SAAA3B,GAAK,OAAI,uBAAQA,EAAR,yBCpEtBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,2DCTNQ,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.636e0855.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport \"./RegionList.css\";\nimport { Link } from 'react-router-dom';\n\nclass RegionList extends Component {\n  render() {\n    const { regions, year } = this.props;\n    return (\n      <ul className=\"list-group list-group-flush\">\n        {\n          regions.map((region, i) => {\n            return (\n              <Link className=\"RegionList\" to={`/region/${region.name}`} key={i}>\n                <li className=\"list-group-item\">\n                  <div>{region.no}</div>\n                  <div>{region.name}</div>\n                  <div>{year}</div>\n                </li>\n              </Link>\n            );\n          })\n        }\n      </ul>\n    );\n  }\n}\n\nexport default RegionList;","import React, { Component } from 'react';\n\nimport \"./CityList.css\";\n\nclass CityList extends Component {\n  render() {\n    const { cities } = this.props;\n    return (\n      <ul className=\"list-group list-group-flush\">\n        {\n          cities.map((city, i) => {\n            return (\n              <a className=\"CityList\" href={city.href} key={i}>\n                <li className=\"list-group-item\">\n                  <div>{city.no}</div>\n                  <div>{city.name}</div>\n                  <div>{city.table_no}</div>\n                </li>\n              </a>\n            );\n          })\n        }\n      </ul>\n    );\n  }\n}\n\nexport default CityList;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport twok19 from \"./data/2019.json\";\nimport RegionList from './RegionList';\nimport CityList from './CityList';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"/mmrexam/\">အောင်စာရင်း</a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/mmrexam/\">2019</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/2018.html\">2018</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/2017.html\">2017</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/2016.html\">2016</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        <div className=\"main\">\n          <Switch>\n            <Route\n              exact\n              path=\"/mmrexam\"\n              render={props => (\n                <RegionList\n                  regions={twok19.years}\n                  year={twok19.year}\n                  {...props}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/mmrexam/region/:regionName\"\n              render={props => {\n                const { regionName } = props.match.params;\n                const currentRegion = twok19.years.find(region => {\n                  return region.name === regionName;\n                });\n                // foreign doesnt' have cities\n                const cities = currentRegion.cities || [{\n                  no: \"၁\",\n                  name: \"နိုင်ငံခြား\",\n                  table_no: \"နခ\",\n                  href: currentRegion.href\n                }];\n                return (\n                  <CityList\n                    cities={cities}\n                    year={twok19.year}\n                  />\n                );\n              }}\n            />\n            <Route exact render={props => <h1 {...props}>404 not found</h1>} />\n          </Switch>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}